name: Build Linux Distributable

on:
  push:

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install ImageMagick
      run: |
        sudo apt-get update
        sudo apt-get install -y imagemagick

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pillow numpy
    
    - name: Install nightly toolchain and GNU target
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rust-src
        targets: x86_64-unknown-linux-gnu
    
    - name: Run tests
      run: |
        RUSTFLAGS="-C target-cpu=native" cargo test --release --all-features

    - name: Build GNU targets
      run: |
        # Scalar
        cargo build --release --lib --features "ffi"
        mkdir -p ci-release
        cp target/release/libyume_pdq.a ci-release/libyume_pdq_scalar.a
        cp target/release/libyume_pdq.so ci-release/libyume_pdq_scalar.so

        # Scalar CFI
        RUSTFLAGS="-Ccodegen-units=1 -Clinker-plugin-lto -Zsanitizer=cfi" cargo +nightly build --profile release-no-lto --lib --features "ffi"
        cp target/release-no-lto/libyume_pdq.so ci-release/libyume_pdq_scalar_cfi.so
        cp target/release-no-lto/libyume_pdq.a ci-release/libyume_pdq_scalar_cfi.a

        # Scalar CFI Binary
        RUSTFLAGS="-Cpanic=abort -Ccodegen-units=1 -Clinker-plugin-lto -Zsanitizer=cfi -Zsanitizer=safestack" cargo +nightly build --profile release-no-lto --bin yume-pdq --features "cli"
        cp target/release-no-lto/yume-pdq ci-release/yume-pdq-scalar-gnu-cfi

        # AVX2
        RUSTFLAGS="-Ctarget-feature=+avx2,+fma" cargo build --release --lib --features "ffi"
        cp target/release/libyume_pdq.so ci-release/libyume_pdq.so
        cp target/release/libyume_pdq.a ci-release/libyume_pdq.a

        # AVX2 CFI
        RUSTFLAGS="-Ctarget-feature=+avx2,+fma -C codegen-units=1 -C linker-plugin-lto -Zsanitizer=cfi" cargo +nightly build --profile release-no-lto --lib --features "ffi"
        cp target/release-no-lto/libyume_pdq.so ci-release/libyume_pdq_cfi.so
        cp target/release-no-lto/libyume_pdq.a ci-release/libyume_pdq_cfi.a

        # AVX2 CFI Binary
        RUSTFLAGS="-Cpanic=abort -Ctarget-feature=+avx2,+fma -Ccodegen-units=1 -Clinker-plugin-lto -Zsanitizer=cfi -Zsanitizer=safestack" cargo +nightly build --profile release-no-lto --bin yume-pdq --features "cli"
        cp target/release-no-lto/yume-pdq ci-release/yume-pdq-gnu-cfi

        # TODO: AVX512 build still doesn't work on GitHub Actions

    - name: Run Shared Library test
      run: |
        for lib in ci-release/*.so; do
          accepted=0
          echo "Testing $lib"
          export LIBYUME_PDQ_PATH=$lib

          # we have a list of acceptable hashes (usually single or double bit flips caused by vectorization rounding errors)
          
          while IFS= read -r whitelist || [ -n "$whitelist" ]; do
            if [ -z "$whitelist" ]; then
              continue
            fi
            if python integration/hash.py test-data/aaa-orig.jpg | grep "$whitelist"; then
              if [ "$?" -eq 0 ]; then
                echo "Successfully matched hash $whitelist with $lib"
                accepted=1
                break
              else
                echo "$lib returned non-zero exit code"
                exit 1
              fi
            else
              echo "Failed to match hash $whitelist with $lib, trying next entry"
            fi
          done < test-data/aaa-orig.jpg.expect 
          if [ $accepted -eq 0 ]; then
            echo "No whitelist matched with $lib output"
            exit 1
          else
            echo "Success with $lib"
          fi
        done

    - name: Install MUSL target
      uses: dtolnay/rust-toolchain@nightly
      with:
        targets: x86_64-unknown-linux-musl

    - name: Build musl target binary
      run: |
        # Scalar
        cargo build --release --bin yume-pdq --features "cli" --target x86_64-unknown-linux-musl
        cp target/x86_64-unknown-linux-musl/release/yume-pdq ci-release/yume-pdq-scalar

        # AVX2
        RUSTFLAGS="-C target-feature=+avx2,+fma" cargo build --release --bin yume-pdq --features "cli" --target x86_64-unknown-linux-musl
        cp target/x86_64-unknown-linux-musl/release/yume-pdq ci-release/yume-pdq

    - name: Test all target binaries
      run: |
        for bin in $(find ci-release -name "yume-pdq*" -executable); do
          echo "Testing $bin"
          
          $bin vectorization-info || exit 1

          rm -f output.tmp          
          convert 'test-data/aaa-orig.jpg' -resize 512x512! -colorspace gray -depth 8 gray:- | \
            "$bin" pipe -f q+hex+lf | tee output.tmp
          matched=0
          while IFS= read -r whitelist || [ -n "$whitelist" ]; do
            if [ -z "$whitelist" ]; then
              continue
            fi
            if grep -q "$whitelist" output.tmp; then
              echo "Successfully matched hash $whitelist with $bin"
              matched=1
              break
            fi
          done < test-data/aaa-orig.jpg.expect
          if [ $matched -eq 0 ]; then
            echo "No whitelist matched with $bin output"
            exit 1
          else
            echo "Success with $bin"
          fi
        done

    - name: Publish Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artifacts-linux
        path: ci-release/*
        retention-days: 30

    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        files: |
          ci-release/*
